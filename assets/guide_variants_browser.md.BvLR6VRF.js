import{_ as s,c as i,o as t,a3 as a}from"./chunks/framework.CDGoHCYz.js";const u=JSON.parse('{"title":"Using Picard.js in the Browser","description":"","frontmatter":{},"headers":[],"relativePath":"guide/variants/browser.md","filePath":"guide/variants/browser.md","lastUpdated":1720652724000}'),e={name:"guide/variants/browser.md"},n=a(`<h1 id="using-picard-js-in-the-browser" tabindex="-1">Using Picard.js in the Browser <a class="header-anchor" href="#using-picard-js-in-the-browser" aria-label="Permalink to &quot;Using Picard.js in the Browser&quot;">​</a></h1><p>Using Picard.js in the browser works by including a <code>script</code> reference to it.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>Add the following to your <code>&lt;head&gt;</code> element.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://unpkg.com/picard-js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>If you want to link to your own version of the script then download / install the <a href="https://www.npmjs.com/package/picard-js" target="_blank" rel="noreferrer">npm package</a> and copy the <code>picard.js</code> file from the <code>dist/browser</code> directory in the package.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You should also copy the other files from the <code>dist/browser</code> directory, too. This way you ensure that other optional libraries, debug tools, and source maps can be properly loaded and used.</p></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>There are two ways to configure it:</p><ol><li>You can specify some options via special attributes such as <code>feed</code>.</li><li>You can have another <code>script</code> element with the special <code>type</code> <code>pi-state</code>; this way you can set the initial state to some already computed state.</li></ol><h3 id="special-attributes" tabindex="-1">Special Attributes <a class="header-anchor" href="#special-attributes" aria-label="Permalink to &quot;Special Attributes&quot;">​</a></h3><p><strong>The <code>feed</code> attribute</strong></p><p>Specifying a micro frontend discovery service with the <code>script</code> element works like this:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://unpkg.com/picard-js&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  feed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://mycompany.com/microfrontends/api&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This will ensure that micro frontends will be obtained from the discovery service <em>in addition to</em> the micro frontends that are directly referenced in the web components.</p><h3 id="initial-state" tabindex="-1">Initial State <a class="header-anchor" href="#initial-state" aria-label="Permalink to &quot;Initial State&quot;">​</a></h3><p>When Picard.js starts it will look for a script tag with the <code>type</code> set to <code>pi-state</code>. The could look like:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pi-state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &quot;microfrontends&quot;: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;components&quot;: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;details&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &quot;id&quot;: &quot;simplehtml&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &quot;url&quot;: &quot;https://assets.piral.cloud/pilets/picard-demos/mf-simple-html/1.0.1/remoteEntry.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;format&quot;: &quot;module&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;name&quot;: &quot;mf-simple-html&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;source&quot;: &quot;https://assets.piral.cloud/pilets/picard-demos/mf-simple-html/1.0.1/remoteEntry.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>The provided state must match the format of Picard&#39;s internal state. One way to get this is to retrieve an export of the internal state, e.g., using the <code>readState()</code> function on <code>window.picard</code>.</p>`,19),l=[n];function o(p,h,r,d,c,k){return t(),i("div",null,l)}const g=s(e,[["render",o]]);export{u as __pageData,g as default};
