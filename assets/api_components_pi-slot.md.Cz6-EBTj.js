import{_ as t,c as e,o as s,a3 as a}from"./chunks/framework.Bp5TMMxn.js";const u=JSON.parse('{"title":"pi-slot API","description":"","frontmatter":{},"headers":[],"relativePath":"api/components/pi-slot.md","filePath":"api/components/pi-slot.md","lastUpdated":1722436261000}'),i={name:"api/components/pi-slot.md"},d=a(`<h1 id="pi-slot-api" tabindex="-1"><code>pi-slot</code> API <a class="header-anchor" href="#pi-slot-api" aria-label="Permalink to &quot;\`pi-slot\` API&quot;">​</a></h1><h2 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Notes</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td></td><td>Name of the components to look for</td></tr><tr><td><code>data</code></td><td></td><td>The data to forward to the components (&quot;props&quot;)</td></tr><tr><td><code>rel</code></td><td>(1)</td><td>The behavior of the slot</td></tr><tr><td><code>item-template-id</code></td><td></td><td>The ID of a template to wrap each found component</td></tr><tr><td><code>fallback-template-id</code></td><td></td><td>The ID of a template to display as fallback</td></tr><tr><td><code>order-by</code></td><td>(2)</td><td>Defines the ordering of the found components</td></tr><tr><td><code>reverse-order</code></td><td></td><td>If set, reverses the order in which the components are displayed</td></tr></tbody></table><p>(1) The slot behavior defines the slot&#39;s relationship to a Picard.js-internal service that is responsible for actually matching the <code>name</code> and the <code>data</code> props. Initially, a single behavior named <code>router</code> is available. This behavior matches the provided name as a <code>page:</code>-component using dynamic route matching.</p><p>(2) The ordering key must be one of <code>cid</code> (order by their component ID), <code>origin</code> (order by their micro frontend name), <code>time</code> (order by the time the component was registered), and <code>none</code> (just take the order in which the components have been found - usually equivalent to <code>time</code> and the default value).</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Notes</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td></td><td>Gets or sets the name attribute</td></tr><tr><td><code>data</code></td><td></td><td>Gets or sets the deserialized data (&quot;props&quot;)</td></tr></tbody></table><p>The serialized data is understood as a JSON string. It is deserialized using <code>JSON.parse</code>. Make sure to only provide valid objects here, otherwise the data will be discarded.</p><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Arguments</th><th>Description</th></tr></thead><tbody><tr><td><code>mounted-slot</code></td><td><code>MountedSlotEvent</code></td><td>Called when the slot was fully mounted</td></tr><tr><td><code>unmounted-slot</code></td><td><code>UnmountedSlotEvent</code></td><td>Called when the slot was fully unmounted</td></tr></tbody></table><p>All events are emitted through the Picard.js event system.</p><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MountedSlotEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * The corresponding HTML element.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnmountedSlotEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * The corresponding HTML element.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14),n=[d];function o(r,h,l,p,c,k){return s(),e("div",null,n)}const b=t(i,[["render",o]]);export{u as __pageData,b as default};
