import{_ as e,c as t,o,a3 as d}from"./chunks/framework.Bp5TMMxn.js";const u=JSON.parse('{"title":"Discovery Schema","description":"","frontmatter":{},"headers":[],"relativePath":"api/discovery/discovery-schema.md","filePath":"api/discovery/discovery-schema.md","lastUpdated":1722436261000}'),r={name:"api/discovery/discovery-schema.md"},i=d('<h1 id="discovery-schema" tabindex="-1">Discovery Schema <a class="header-anchor" href="#discovery-schema" aria-label="Permalink to &quot;Discovery Schema&quot;">​</a></h1><p>Discovery service responses following <a href="https://github.com/awslabs/frontend-discovery" target="_blank" rel="noreferrer">the MFWG schema specification</a> are directly supported.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Follow the JSON schema defined in the linked <a href="https://github.com/awslabs/frontend-discovery/blob/main/schema/v1-pre.json" target="_blank" rel="noreferrer">GitHub repository</a> for making your own discovery service compatible with Picard.</p></div><h2 id="schema-description" tabindex="-1">Schema Description <a class="header-anchor" href="#schema-description" aria-label="Permalink to &quot;Schema Description&quot;">​</a></h2><p>The returned response has either to be an object with a property named <code>microFrontends</code>, which is an object again - consisting of a mapping of names of micro frontends to their different definitions (i.e., one or more definitions per version).</p><h2 id="mapping-of-properties" tabindex="-1">Mapping of Properties <a class="header-anchor" href="#mapping-of-properties" aria-label="Permalink to &quot;Mapping of Properties&quot;">​</a></h2><h3 id="module-federation" tabindex="-1">Module Federation <a class="header-anchor" href="#module-federation" aria-label="Permalink to &quot;Module Federation&quot;">​</a></h3><p>To be recognized as a micro frontend using Module Federation the entry needs to have a section <code>modulefederation</code> placed on <code>extras</code> of the definition. Alternatively, if the URL ends with <code>.js</code> and no other type has been recognized Picard.js will fall back to Module Federation.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td><code>[key]</code></td><td>Name of the micro frontend</td></tr><tr><td><code>[value]</code></td><td>The micro frontend definition</td></tr><tr><td><code>def.url</code></td><td>Link to the remote entry manifest</td></tr><tr><td><code>def.extras.id</code></td><td>The global name of the remote</td></tr><tr><td><code>def.extras.metaData</code></td><td>The <code>metaData</code> section of the remote entry manifest</td></tr><tr><td><code>def.extras.exposes</code></td><td>The <code>exposes</code> section of the remote entry manifest</td></tr><tr><td><code>def.extras.remotes</code></td><td>The <code>remotes</code> section of the remote entry manifest</td></tr><tr><td><code>def.extras.shared</code></td><td>The <code>shared</code> section of the remote entry manifest</td></tr><tr><td><code>def.extras.runtime</code></td><td>The MF runtime version (e.g., <code>1.0</code> or <code>2.0</code>)</td></tr><tr><td><code>def.extras.type</code></td><td>The type (<code>esm</code> / <code>module</code> or <code>var</code> / <code>global</code>)</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is crucial that the right runtime version of Module Federation is transported. While a missing <code>runtime</code> value could still be inferred correctly, an incorrect one will almost certainly lead to a wrong interpretation of the micro frontend.</p></div><h3 id="native-federation" tabindex="-1">Native Federation <a class="header-anchor" href="#native-federation" aria-label="Permalink to &quot;Native Federation&quot;">​</a></h3><p>To be recognized as a micro frontend using Native Federation the entry needs to have a section <code>nativefederation</code> placed on <code>extras</code> of the definition.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td><code>[key]</code></td><td>Name of the micro frontend</td></tr><tr><td><code>[value]</code></td><td>The micro frontend definition</td></tr><tr><td><code>def.url</code></td><td>Link to the remote entry JSON</td></tr><tr><td><code>def.extras.exposes</code></td><td>The <code>exposes</code> section of the remote entry JSON</td></tr><tr><td><code>def.extras.dependencies</code></td><td>The <code>dependencies</code> section of the remote entry JSON</td></tr></tbody></table><h3 id="pilets" tabindex="-1">Pilets <a class="header-anchor" href="#pilets" aria-label="Permalink to &quot;Pilets&quot;">​</a></h3><p>To be recognized as a micro frontend using Piral (i.e., a pilet) the entry needs to have a section <code>pilet</code> placed on <code>extras</code> of the definition.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td><code>[key]</code></td><td>Name of the micro frontend</td></tr><tr><td><code>[value]</code></td><td>The micro frontend definition</td></tr><tr><td><code>def.url</code></td><td>Link to the entry module</td></tr><tr><td><code>def.extras.dependencies</code></td><td>The <code>dependencies</code> section of pilet</td></tr><tr><td><code>def.extras.config</code></td><td>The <code>config</code> section of the pilet</td></tr><tr><td><code>def.extras.pilet.spec</code></td><td>The <code>spec</code> section of the pilet</td></tr><tr><td><code>def.version</code></td><td>The <code>version</code> of the pilet</td></tr><tr><td><code>def.integrity</code></td><td>The <code>integrity</code> section of the pilet</td></tr></tbody></table><h3 id="anything-else" tabindex="-1">Anything Else <a class="header-anchor" href="#anything-else" aria-label="Permalink to &quot;Anything Else&quot;">​</a></h3><p><strong>This is not supported</strong> (right now).</p><p>All values in the discovery schema are interepreted as one of the previously three mentioned formats. If you know another format that can be / is transported commonly then let us know!</p>',19),a=[i];function c(n,s,h,l,f,p){return o(),t("div",null,a)}const y=e(r,[["render",c]]);export{u as __pageData,y as default};
