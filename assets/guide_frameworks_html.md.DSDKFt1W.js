import{_ as s,c as i,o as t,a3 as a}from"./chunks/framework.CDGoHCYz.js";const m=JSON.parse('{"title":"Using HTML Fragments","description":"","frontmatter":{},"headers":[],"relativePath":"guide/frameworks/html.md","filePath":"guide/frameworks/html.md","lastUpdated":1720686613000}'),e={name:"guide/frameworks/html.md"},n=a(`<h1 id="using-html-fragments" tabindex="-1">Using HTML Fragments <a class="header-anchor" href="#using-html-fragments" aria-label="Permalink to &quot;Using HTML Fragments&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>HTML is the foundational layer of everything - the markup that is understood by the browser and therefore the text representation that needs to be chosen by any web server when sending back a document to the browser.</p><h2 id="using-html-fragments-in-picard-js" tabindex="-1">Using HTML Fragments in Picard.js <a class="header-anchor" href="#using-html-fragments-in-picard-js" aria-label="Permalink to &quot;Using HTML Fragments in Picard.js&quot;">​</a></h2><p>Let&#39;s see how an example HTML fragment can be exposed:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`&lt;div&gt;Hello World!&lt;/div&gt;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> html;</span></span></code></pre></div><p>With this definition your component is properly exported. The exported string indicates the content of the component.</p><p>Now you can use this HTML fragment in a <code>pi-component</code> as follows:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pi-component</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyComponent&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some-mfe&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;html&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pi-component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This will work on the client, as well as on the server. In both cases the retrieved string represents the <code>innerHTML</code> of the <code>pi-component</code>.</p>`,10),h=[n];function l(o,p,r,d,k,c){return t(),i("div",null,h)}const u=s(e,[["render",l]]);export{m as __pageData,u as default};
