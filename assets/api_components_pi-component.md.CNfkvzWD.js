import{_ as t,c as s,o as e,a3 as a}from"./chunks/framework.Bp5TMMxn.js";const g=JSON.parse('{"title":"pi-component API","description":"","frontmatter":{},"headers":[],"relativePath":"api/components/pi-component.md","filePath":"api/components/pi-component.md","lastUpdated":1721918983000}'),i={name:"api/components/pi-component.md"},n=a(`<h1 id="pi-component-api" tabindex="-1"><code>pi-component</code> API <a class="header-anchor" href="#pi-component-api" aria-label="Permalink to &quot;\`pi-component\` API&quot;">​</a></h1><h2 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Notes</th><th>Description</th></tr></thead><tbody><tr><td><code>cid</code></td><td>(1)</td><td>Component ID, i.e., what should be display</td></tr><tr><td><code>name</code></td><td>(2,3)</td><td>Name of the component in the referenced micro frontend</td></tr><tr><td><code>source</code></td><td>(2,3)</td><td>Name of the micro frontend or URL to a micro frontend</td></tr><tr><td><code>format</code></td><td>(3)</td><td>Format of the micro frontend to load</td></tr><tr><td><code>remote-name</code></td><td>(3)</td><td>The name of the remote in case of Module Federation v1</td></tr><tr><td><code>remote-type</code></td><td>(3)</td><td>The type of the remote in case of Module Federation v1</td></tr><tr><td><code>data</code></td><td></td><td>The data to forward to the component (&quot;props&quot;)</td></tr><tr><td><code>framework</code></td><td></td><td>The framework to use for displaying the component</td></tr><tr><td><code>fallback-template-id</code></td><td></td><td>The ID of a template to display as fallback</td></tr></tbody></table><p>If (1) is used the other attribute groups (2 or 3) are not taken into consideration. If <code>source</code> is a URL leading to a new micro frontend, group (3) is also used. Otherwise, (3) has no effect.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Notes</th><th>Description</th></tr></thead><tbody><tr><td><code>data</code></td><td></td><td>Gets or sets the deserialized data (&quot;props&quot;)</td></tr></tbody></table><p>The serialized data is understood as a JSON string. It is deserialized using <code>JSON.parse</code>. Make sure to only provide valid objects here, otherwise the data will be discarded.</p><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Arguments</th><th>Description</th></tr></thead><tbody><tr><td><code>changed-data</code></td><td><code>ChangedDataEvent</code></td><td>Called when the data is changed</td></tr><tr><td><code>mounted-component</code></td><td><code>MountedComponentEvent</code></td><td>Called when the component was fully mounted</td></tr><tr><td><code>unmounted-component</code></td><td><code>UnmountedComponentEvent</code></td><td>Called when the component was fully unmounted</td></tr></tbody></table><p>All events are emitted through the Picard.js event system.</p><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChangedDataEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * The currently deserialized data.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  current</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * The currently available data serialization.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MountedComponentEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * The corresponding HTML element.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnmountedComponentEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * The corresponding HTML element.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14),d=[n];function o(h,p,l,r,c,k){return e(),s("div",null,d)}const u=t(i,[["render",o]]);export{g as __pageData,u as default};
